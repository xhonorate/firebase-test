/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { GroupProps, useGraph } from '@react-three/fiber'
import CharacterMage from './character_mage'
import PrototypePete from '../test/PrototypePete';
import { SkeletonUtils } from 'three-stdlib'
import useBarbarianParts from './useBarbarianParts';

type GLTFResult = GLTF & {
  nodes: {
    PrototypePete: THREE.SkinnedMesh
    Body: THREE.Bone
  }
  materials: {
    PrototypePete: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[];
}

export type ActionName =
  | 'Attack(1h)'
  | 'AttackCombo'
  | 'AttackSpinning'
  | 'BasePose'
  | 'Block'
  | 'Cheer'
  | 'Climbing'
  | 'Dance'
  | 'DashBack'
  | 'DashFront'
  | 'DashLeft'
  | 'DashRight'
  | 'Defeat'
  | 'HeavyAttack'
  | 'Hop'
  | 'Idle'
  | 'Interact'
  | 'Jump'
  | 'LayingDownIdle'
  | 'PickUp'
  | 'Roll'
  | 'Run'
  | 'Shoot(1h)'
  | 'Shoot(2h)'
  | 'Shoot(2h)Bow'
  | 'Shooting(1h)'
  | 'Shooting(2h)'
  | 'Throw'
  | 'Walk'
  | 'Wave'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

interface AnimatedProps extends GroupProps {
  anim: ActionName | null
}

export default function AnimatedCharacter({anim, ...props}: AnimatedProps) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/assets/kaykit/Models/characters/PrototypePete.gltf') as any

  const { body, head, armLeft, armRight } = useBarbarianParts(); //TODO: pass as param

  const { nodes: bones, animations } = useGLTF('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb') as any
  // TODO: Maybe need to clone skeleton (https://codesandbox.io/s/react-three-fiber-wildlife-nrbnq?file=/src/Model.js)

  const { actions } = useAnimations<GLTFAction>(animations, group)
  
  useEffect(() => {
    if (!!anim) {
      console.log(anim);
      actions[anim].play();
    }
  }, [anim, actions]) 

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={bones.Body}>
        { /* TODO: have characters export meshes for head/body/arms import and place within respective Bone primatives! */}
        {body}
        
        <primitive object={bones.armLeft}>
          {armLeft}
        </primitive>

        <primitive object={bones.armRight}>
          {armRight}
        </primitive>

        <primitive object={bones.Head}>
          {head}
        </primitive>
      </primitive>
    </group>
  )
}

useGLTF.preload('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb')
