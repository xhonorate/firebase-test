/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useCallback, useEffect, useMemo, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { GroupProps, useGraph } from '@react-three/fiber'
import { SkeletonUtils } from 'three-stdlib';
import { CharacterType } from './Parts/useParts';
import useParts from './Parts/useParts';
import { useEventListener } from '@chakra-ui/react'

type GLTFResult = GLTF & {
  nodes: {
    PrototypePete: THREE.SkinnedMesh
    Body: THREE.Bone,
    Head: THREE.Bone,
    armLeft: THREE.Bone,
    armRight: THREE.Bone,
    handSlotLeft: THREE.Bone,
    handSlotRight: THREE.Bone,
  }
  materials: {
    PrototypePete: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[];
}

export type ActionName =
  | 'Attack(1h)'
  | 'AttackCombo'
  | 'AttackSpinning'
  | 'BasePose'
  | 'Block'
  | 'Cheer'
  | 'Climbing'
  | 'Dance'
  | 'DashBack'
  | 'DashFront'
  | 'DashLeft'
  | 'DashRight'
  | 'Defeat'
  | 'HeavyAttack'
  | 'Hop'
  | 'Idle'
  | 'Interact'
  | 'Jump'
  | 'LayingDownIdle'
  | 'PickUp'
  | 'Roll'
  | 'Run'
  | 'Shoot(1h)'
  | 'Shoot(2h)'
  | 'Shoot(2h)Bow'
  | 'Shooting(1h)'
  | 'Shooting(2h)'
  | 'Throw'
  | 'Walk'
  | 'Wave'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

interface Equipment {
  head?: JSX.Element,
  body?: JSX.Element,
  armLeft?: JSX.Element,
  armRight?: JSX.Element,
  handSlotLeft?: JSX.Element,
  handSlotRight?: JSX.Element
}

interface AnimPlayProps {
  anim: ActionName, 
  loop: boolean, 
  next?: AnimPlayProps,
}

export default function useAnimatedChar(character: CharacterType, equipment: Equipment = null) {
  const group = useRef<THREE.Group>()
  const action = useRef<ActionName>("Idle"); //current animation playing
  const next = useRef<AnimPlayProps>(null); //next animation to be played

  const parts = useParts(character);

  const { scene, animations } = useGLTF('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb') as any as GLTFResult

  // Clone skeleton (https://codesandbox.io/s/react-three-fiber-wildlife-nrbnq?file=/src/Model.js)
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  // TODO: try to clone just what is neccessary (not the whole skinned mesh)
  const { nodes: bones } = useGraph(clone)

  const { actions, mixer } = useAnimations<GLTFAction>(animations, group)

  const play = useCallback((anim: ActionName = "Idle", loop = false, upNext: AnimPlayProps = null) => {
    console.log('Play: ', anim);
    if (!actions[anim].isRunning()) {
      if (action.current && action.current !== anim) {
        // TODO: Animation blending depending on which two are being interpolated 
        actions[action.current].crossFadeTo(actions[anim], 1, true).play();
      } else {
        actions[anim].play();
      }
      action.current = anim;
      next.current = upNext;
    }
  }, [actions])
  
  // Attatch event listeners
  useEffect(() => {
    const onAnimComplete = (e: any) => {
      console.log("complete, playnext:", next.current);
      // If a next action is queued - move queue forward
      if (next.current) {
        next.current = next.current?.next ?? null;
        play(next.current.anim, next.current.loop, next.current.next);
      }
    }

    if (!mixer.hasEventListener('finished', onAnimComplete)) {
      // Listener for animations completed  
      mixer.addEventListener('finished', onAnimComplete);
    }

    return () => {
      // Remove listener on unmount
      mixer.removeEventListener('finished', onAnimComplete);
    }
  }, [mixer, play])

  // Import Parts for character type, then place them within respective bone primatives
  // TODO: should this be useMemo or not? idk check for mem leaks ----- I think its good?
  const Model = useMemo(() => { 
    console.log("UPDATE MODEL")
    return(
    <group ref={group} dispose={null}>
      <primitive object={bones.Body}>
        {parts.body}
        {equipment?.body}
        
        <primitive object={bones.Head}>
          {parts.head}
          {equipment?.head}
          {/* TODO: custom heads! just include <KnightHeadA /> here */}
        </primitive>

        <primitive object={bones.armLeft}>
          <group position={[0,0.1,-0.03]} rotation={[0, 3 * Math.PI / 2, 0.85 * Math.PI]}>
            {parts.armLeft}
            {equipment?.armLeft}
          </group>

          <primitive object={bones.handSlotLeft}>
            {equipment?.handSlotLeft}
          </primitive>
        </primitive>

        <primitive object={bones.armRight}>
          <group position={[0,0.1,0.03]} rotation={[0, 3 * Math.PI / 2, -0.85 * Math.PI]}>
            {parts.armRight}
            {equipment?.armRight}
          </group>
          
          <primitive object={bones.handSlotRight}>
            {equipment?.handSlotRight}
          </primitive>
        </primitive>
      </primitive>
    </group>
  )}, [bones, equipment, parts]);

  return {
    Model,
    play
  }
}

useGLTF.preload('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb')
