/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { GroupProps } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    PrototypePete: THREE.SkinnedMesh
    Body: THREE.Bone
  }
  materials: {
    PrototypePete: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'Attack(1h)'
  | 'AttackCombo'
  | 'AttackSpinning'
  | 'BasePose'
  | 'Block'
  | 'Cheer'
  | 'Climbing'
  | 'Dance'
  | 'DashBack'
  | 'DashFront'
  | 'DashLeft'
  | 'DashRight'
  | 'Defeat'
  | 'HeavyAttack'
  | 'Hop'
  | 'Idle'
  | 'Interact'
  | 'Jump'
  | 'LayingDownIdle'
  | 'PickUp'
  | 'Roll'
  | 'Run'
  | 'Shoot(1h)'
  | 'Shoot(2h)'
  | 'Shoot(2h)Bow'
  | 'Shooting(1h)'
  | 'Shooting(2h)'
  | 'Throw'
  | 'Walk'
  | 'Wave'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

interface AnimatedProps extends GroupProps {
  anim: string
}

export default function AnimatedCharacter({anim, ...props}: AnimatedProps) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb') as unknown as GLTFResult
  const { actions } = useAnimations<GLTFActions | any>(animations, group)

  useEffect(() => {
    if (!!anim) {
      actions[anim].play();
    }
  }, [anim, actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Body} />
      <skinnedMesh
        geometry={nodes.PrototypePete.geometry}
        material={materials.PrototypePete}
        skeleton={nodes.PrototypePete.skeleton}
      />
    </group>
  )
}

useGLTF.preload('/assets/kaykit/Models/characters/AnimatedCharacter.gltf.glb')
